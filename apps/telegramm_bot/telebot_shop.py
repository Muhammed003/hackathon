import telebot
from telebot import types
from db import *
import psycopg2
# -*- coding: utf-8 -*-
"""
My modules.
"""
from Mytoken import token

""""""""""""
API_TOKEN = token
bot = telebot.TeleBot(API_TOKEN)


# START BOT
class Start:
    @bot.message_handler(func=lambda message: message.text == "‚Üñ –ù–∞ –ì–ª–∞–≤–Ω—É—é")
    @bot.message_handler(commands=['start'])
    def menu(message):
        chat_id = message.chat.id
        first_buttons = types.ReplyKeyboardMarkup(
            row_width=2, resize_keyboard=True)
        btn1 = types.KeyboardButton("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
        btn2 = types.KeyboardButton("–¢–û–ü 10 –ª—É—á—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤")
        first_buttons.add(btn1, btn2)
        bot.reply_to(message, text=f"""–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.first_name}!
        –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –¢–µ–ª–µ–≥—Ä–∞–º –ë–û–¢. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–∏—Ö –ú–∞–≥–∞–∑–∏–Ω\n\n
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –Ω–∏–±—É–¥—å –∏–∑ –ø—Ä–µ–¥–æ–ª–∂–µ–Ω–Ω–æ–≥–æ –∏ —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–ª—å—à–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
""", reply_markup=first_buttons)


# CATEGORY DATA
DATA_CATEGORY = {}
PRODUCT_CHOICES = (
    ("wardrobes", "‚≠ê –®–ö–ê–§"),
    ("bedroom-sets", "‚≠ê –°–ü–ê–õ–¨–ù–ò"),
    ("hallways", "‚≠ê –ü–†–ò–•–û–ñ–ò–ï"),
    ("kitchens", "‚≠ê –ö–£–•–ù–ò"),
    ("tv-stand", "‚≠ê TV –¢–£–ú–ë–´"),
    ("dressers", "‚≠ê –ö–û–ú–û–î–´"),
    ("living-room-sets", "‚≠ê –ì–û–°–¢–ò–ù–´–ï"),
    ("children-sets", "‚≠ê –î–ï–¢–°–ö–ò–ï & –û–§–ò–°"),
    ("cushioned-furniture", "‚≠ê –ú–Ø–ì–ö–ê–Ø –ú–ï–ë–ï–õ–¨"),
)
for item in PRODUCT_CHOICES:
    DATA_CATEGORY[item[1]] = item[0]


class Product:
    # CATEGORY CODE
    @bot.message_handler(func=lambda message: message.text == "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏" or message.text == "‚óÄ –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    def category(message):
        chat_id = message.chat.id
        markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
        btn1 = types.KeyboardButton("‚Üñ –ù–∞ –ì–ª–∞–≤–Ω—É—é")
        row = [types.KeyboardButton(x) for x in DATA_CATEGORY.keys()]
        row.append(btn1)
        markup.add(*row)
        categories = []
        for k, v in DATA_CATEGORY.items():
            categories.append(f'{v}. {k}')
        x = '\n'.join(categories)
        m = bot.send_message(
            chat_id, text=f"–í—ã–±–µ—Ä–∏—Ç–µ –ö–∞—Ç–µ–≥–æ—Ä–∏—é ‚¨á‚¨á‚¨á", reply_markup=markup)

    # PRODUCT VIEW
    @bot.message_handler(func=lambda message: message.text in [x for x in DATA_CATEGORY.keys()])
    def product(message):
        chat_id = message.chat.id
        if message.text != "‚óÄ –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" or message.text != "‚Üñ –ù–∞ –ì–ª–∞–≤–Ω—É—é":
            global DATA_PRODUCT
            DATA_PRODUCT= {}
            cursor = connection.cursor()
            cursor.execute(
                f"SELECT * FROM product_product where type='{DATA_CATEGORY[message.text]}'"
            )
            data = cursor.fetchall()
            for item in data:
                DATA_PRODUCT[item[1]] = item[0]
            chat_id = message.chat.id
            markup = types.InlineKeyboardMarkup(row_width=2)
            row = [types.InlineKeyboardButton(f"üìã {k}", callback_data=f"{v}") for k, v in DATA_PRODUCT.items()]
            markup.add(*row)
            m = bot.send_message(chat_id, text=f"–í—ã–±–µ—Ä–∏—Ç–µ –ü—Ä–æ–¥—É–∫—Ç:", reply_markup=markup)

    @bot.callback_query_handler(func=lambda call: True)
    def product_detail(call):
        bot.answer_callback_query(call.id)
        chat_id = call.message.chat.id
        if int(call.data) in [x for x in DATA_PRODUCT.values()]:
            cursor = connection.cursor()
            cursor.execute(
                f'SELECT * FROM product_product where product_product.id = {int(call.data)}'
            )
            data = cursor.fetchall()
            DATA_PRODUCT_DETAIL = {}
            product_link = f"http://127.0.0.1:8000/product/{int(call.data)}/"
            products = []

            for item in data:
                type = {v: k for k, v in DATA_CATEGORY.items()}
                try:
                    products.append(f' ID: {item[0]}\n –ò–ú–Ø: "{item[1]}"\n –û–ü–ò–°–ê–ù–ò–ï: "{item[2]}"\n –¶–ï–ù–ê : "{item[3]}"\n '
                                    f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: "{type.get(item[4])}"\n –î–ê–¢–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø: "{item[7]}"\n '
                                    f'–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: "{item[5]}"\n –§–æ—Ç–æ: "{item[9]}"')
                except:
                    products.append(f' ID: {item[0]}\n –ò–ú–Ø: {item[1]}\n –û–ü–ò–°–ê–ù–ò–ï: {item[2]}\n –¶–ï–ù–ê :'
                                    f' {item[3]}\n –ö–∞—Ç–µ–≥–æ—Ä–∏—è: "{type.get(item[4])}"\n –î–ê–¢–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø: {item[7]}\n '
                                    f'–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {item[5]}\n –§–æ—Ç–æ: ""')
                x = '\n'.join(products)
                log_title = [item[1] for item in data]
                log_title = '\n'.join(log_title)
                m = bot.send_message(chat_id,
                                     text=f'<b>{log_title}</b><pre>{x}</pre> \n\nLink: <b>{product_link}</b>',
                                     parse_mode='HTML')
        else:
            m = bot.send_message(
                chat_id, text=f"–ü—Ä–æ–¥—É–∫—Ç—ã —Ç–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ")
bot.infinity_polling()
